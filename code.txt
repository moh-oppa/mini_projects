@patch("app.delivery.routes.delivery_repository", new_callable=AsyncMock)
@pytest.mark.asyncio
async def test_assigned_deliveries_motorist_found_and_deliveries_exist(mock_repository):
    mock_motorist_id = UUID4("123e4567-e89b-12d3-a456-426614174000")
    mock_deliveries = [
        {"id": 1, "status": "delivered", "price": 100.0, "delivery_time": "2023-08-25T10:00:00Z"},
        {"id": 2, "status": "pending", "price": 50.0, "delivery_time": "2023-08-26T10:00:00Z"},
    ]

    mock_repository.get_motorist.return_value = {"id": str(mock_motorist_id)}
    mock_repository.get_deliveries_by_motorist_id.return_value = mock_deliveries

    # with patch("app.delivery_repository.DeliveryRepository", return_value=mock_repository):
    #     async with AsyncClient(transport=ASGITransport(app=app), base_url="http://test") as ac:
    response = await assigned_deliveries(mock_motorist_id)

    assert response.status_code == 200
    assert response.json() == mock_deliveries
    # mock_repository.get_motorist.assert_awaited_once_with()
    # mock_repository.get_deliveries_by_motorist_id.assert_awaited_once_with(str()
